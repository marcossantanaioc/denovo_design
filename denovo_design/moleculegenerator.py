# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/MoleculeGenerator.ipynb.

# %% auto 0
__all__ = ['MolGenerator']

# %% ../notebooks/MoleculeGenerator.ipynb 3
from .generative_basics import *
from rdkit.Chem import MolFromSmiles, MolToSmiles
from tqdm.notebook import tqdm

from typing import List, Tuple, Collection

from time import sleep

from .chem import is_valid

# %% ../notebooks/MoleculeGenerator.ipynb 4
class MolGenerator(MolSampler):
    """Molecule generator based on ULMFIT. Given a trained molecule model (e.g. LSTM), generates molecules starting from a seed text. 

    
    """
    
    def __init__(self, model_fname, text='', cpu = False, **kwargs):
        
        """
        
        Arguments:
        
        model_fname : Learner 
            Path to a trained ULMFIT model 
        
        text : str 
            Seed text used to start the generative process. At the moment only an empty string is available ("") 
        
        
        cpu : bool 
            If True, uses cpu to make predictions
            """
                   

        super(MolGenerator, self).__init__(model_fname, text, cpu)
        self.model_fname = model_fname
        self.text = text
        self.cpu = cpu

    
    def generate_mols(self, max_size=100, max_mols=5, temperature=1.0):
        """Generate molecules using a base sampler"""

        generated_mols = set()
        
        
        while len(generated_mols) < max_mols:
            
            
            mol = is_valid(self.base_sampler(max_size=max_size, temperature=temperature))
            
            if mol != None:
                generated_mols.add(mol)
                print(f'{len(generated_mols)}/{max_mols}',end='\r')
 
        return tuple(generated_mols)
    

    def predict(self, mols:List=[], canonical:bool=True, thresh:float=0.5, **kwargs):
        return NotImplemented
