# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/chem.ipynb.

# %% auto 0
__all__ = ['is_valid', 'randomize_smiles', 'smiles_augmentation']

# %% ../notebooks/chem.ipynb 2
from rdkit.Chem import MolFromSmiles, MolToSmiles
from rdkit import Chem

# %% ../notebooks/chem.ipynb 3
def is_valid(smiles):
    
    """ Check if a given SMILES is a valid structure """
    
    if isinstance(smiles, str): 
        mol = MolFromSmiles(smiles)
        if mol is not None and mol.GetNumAtoms()>0:
            return MolToSmiles(mol)
        
        
def randomize_smiles(smiles):
    
    """ Randomize a SMILES string """
    
    return MolToSmiles(MolFromSmiles(smiles),doRandom=True,canonical=False)

def smiles_augmentation(df=None,smiles_column='processed_smiles', N_rounds=2):
    
    """Randomize SMILES in a pandas.DataFrame column"""
    
    cols = [c for c in df.columns if c != smiles_column]
    dist_aug = {'aug_smiles' : []}


    duplicated_df = df[cols].append([df[cols]]*(N_rounds-1),ignore_index=False)
    
    for i in range(df.shape[0]):      
        for _ in range(N_rounds):
            dist_aug['aug_smiles'].append(randomize_smiles(df.iloc[i][smiles_column]))
            
    assert len(dist_aug['aug_smiles']) == duplicated_df.shape[0]
    duplicated_df.sort_index(inplace=True)
    duplicated_df.insert(loc=1, column=smiles_column, value=dist_aug['aug_smiles'])

    
    return duplicated_df.reset_index(drop=True)
